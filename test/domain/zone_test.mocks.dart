// Mocks generated by Mockito 5.4.4 from annotations
// in regions_music/test/domain/zone_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:audio_session/audio_session.dart' as _i5;
import 'package:just_audio/just_audio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sqflite_common/sql.dart' as _i7;
import 'package:sqflite_common/sqlite_api.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlaybackEvent_0 extends _i1.SmartFake implements _i2.PlaybackEvent {
  _FakePlaybackEvent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlayerState_2 extends _i1.SmartFake implements _i2.PlayerState {
  _FakePlayerState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_3 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_4<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryCursor_5 extends _i1.SmartFake implements _i3.QueryCursor {
  _FakeQueryCursor_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatch_6 extends _i1.SmartFake implements _i3.Batch {
  _FakeBatch_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i2.AudioPlayer {
  @override
  _i2.PlaybackEvent get playbackEvent => (super.noSuchMethod(
        Invocation.getter(#playbackEvent),
        returnValue: _FakePlaybackEvent_0(
          this,
          Invocation.getter(#playbackEvent),
        ),
        returnValueForMissingStub: _FakePlaybackEvent_0(
          this,
          Invocation.getter(#playbackEvent),
        ),
      ) as _i2.PlaybackEvent);

  @override
  _i4.Stream<_i2.PlaybackEvent> get playbackEventStream => (super.noSuchMethod(
        Invocation.getter(#playbackEventStream),
        returnValue: _i4.Stream<_i2.PlaybackEvent>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.PlaybackEvent>.empty(),
      ) as _i4.Stream<_i2.PlaybackEvent>);

  @override
  _i4.Stream<Duration?> get durationStream => (super.noSuchMethod(
        Invocation.getter(#durationStream),
        returnValue: _i4.Stream<Duration?>.empty(),
        returnValueForMissingStub: _i4.Stream<Duration?>.empty(),
      ) as _i4.Stream<Duration?>);

  @override
  _i2.ProcessingState get processingState => (super.noSuchMethod(
        Invocation.getter(#processingState),
        returnValue: _i2.ProcessingState.idle,
        returnValueForMissingStub: _i2.ProcessingState.idle,
      ) as _i2.ProcessingState);

  @override
  _i4.Stream<_i2.ProcessingState> get processingStateStream =>
      (super.noSuchMethod(
        Invocation.getter(#processingStateStream),
        returnValue: _i4.Stream<_i2.ProcessingState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.ProcessingState>.empty(),
      ) as _i4.Stream<_i2.ProcessingState>);

  @override
  bool get playing => (super.noSuchMethod(
        Invocation.getter(#playing),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Stream<bool> get playingStream => (super.noSuchMethod(
        Invocation.getter(#playingStream),
        returnValue: _i4.Stream<bool>.empty(),
        returnValueForMissingStub: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  double get volume => (super.noSuchMethod(
        Invocation.getter(#volume),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i4.Stream<double> get volumeStream => (super.noSuchMethod(
        Invocation.getter(#volumeStream),
        returnValue: _i4.Stream<double>.empty(),
        returnValueForMissingStub: _i4.Stream<double>.empty(),
      ) as _i4.Stream<double>);

  @override
  double get speed => (super.noSuchMethod(
        Invocation.getter(#speed),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i4.Stream<double> get speedStream => (super.noSuchMethod(
        Invocation.getter(#speedStream),
        returnValue: _i4.Stream<double>.empty(),
        returnValueForMissingStub: _i4.Stream<double>.empty(),
      ) as _i4.Stream<double>);

  @override
  double get pitch => (super.noSuchMethod(
        Invocation.getter(#pitch),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i4.Stream<double> get pitchStream => (super.noSuchMethod(
        Invocation.getter(#pitchStream),
        returnValue: _i4.Stream<double>.empty(),
        returnValueForMissingStub: _i4.Stream<double>.empty(),
      ) as _i4.Stream<double>);

  @override
  bool get skipSilenceEnabled => (super.noSuchMethod(
        Invocation.getter(#skipSilenceEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Stream<bool> get skipSilenceEnabledStream => (super.noSuchMethod(
        Invocation.getter(#skipSilenceEnabledStream),
        returnValue: _i4.Stream<bool>.empty(),
        returnValueForMissingStub: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  Duration get bufferedPosition => (super.noSuchMethod(
        Invocation.getter(#bufferedPosition),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#bufferedPosition),
        ),
        returnValueForMissingStub: _FakeDuration_1(
          this,
          Invocation.getter(#bufferedPosition),
        ),
      ) as Duration);

  @override
  _i4.Stream<Duration> get bufferedPositionStream => (super.noSuchMethod(
        Invocation.getter(#bufferedPositionStream),
        returnValue: _i4.Stream<Duration>.empty(),
        returnValueForMissingStub: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Stream<_i2.IcyMetadata?> get icyMetadataStream => (super.noSuchMethod(
        Invocation.getter(#icyMetadataStream),
        returnValue: _i4.Stream<_i2.IcyMetadata?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.IcyMetadata?>.empty(),
      ) as _i4.Stream<_i2.IcyMetadata?>);

  @override
  _i2.PlayerState get playerState => (super.noSuchMethod(
        Invocation.getter(#playerState),
        returnValue: _FakePlayerState_2(
          this,
          Invocation.getter(#playerState),
        ),
        returnValueForMissingStub: _FakePlayerState_2(
          this,
          Invocation.getter(#playerState),
        ),
      ) as _i2.PlayerState);

  @override
  _i4.Stream<_i2.PlayerState> get playerStateStream => (super.noSuchMethod(
        Invocation.getter(#playerStateStream),
        returnValue: _i4.Stream<_i2.PlayerState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.PlayerState>.empty(),
      ) as _i4.Stream<_i2.PlayerState>);

  @override
  _i4.Stream<List<_i2.IndexedAudioSource>?> get sequenceStream =>
      (super.noSuchMethod(
        Invocation.getter(#sequenceStream),
        returnValue: _i4.Stream<List<_i2.IndexedAudioSource>?>.empty(),
        returnValueForMissingStub:
            _i4.Stream<List<_i2.IndexedAudioSource>?>.empty(),
      ) as _i4.Stream<List<_i2.IndexedAudioSource>?>);

  @override
  _i4.Stream<List<int>?> get shuffleIndicesStream => (super.noSuchMethod(
        Invocation.getter(#shuffleIndicesStream),
        returnValue: _i4.Stream<List<int>?>.empty(),
        returnValueForMissingStub: _i4.Stream<List<int>?>.empty(),
      ) as _i4.Stream<List<int>?>);

  @override
  _i4.Stream<int?> get currentIndexStream => (super.noSuchMethod(
        Invocation.getter(#currentIndexStream),
        returnValue: _i4.Stream<int?>.empty(),
        returnValueForMissingStub: _i4.Stream<int?>.empty(),
      ) as _i4.Stream<int?>);

  @override
  _i4.Stream<_i2.SequenceState?> get sequenceStateStream => (super.noSuchMethod(
        Invocation.getter(#sequenceStateStream),
        returnValue: _i4.Stream<_i2.SequenceState?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.SequenceState?>.empty(),
      ) as _i4.Stream<_i2.SequenceState?>);

  @override
  bool get hasNext => (super.noSuchMethod(
        Invocation.getter(#hasNext),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasPrevious => (super.noSuchMethod(
        Invocation.getter(#hasPrevious),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.LoopMode get loopMode => (super.noSuchMethod(
        Invocation.getter(#loopMode),
        returnValue: _i2.LoopMode.off,
        returnValueForMissingStub: _i2.LoopMode.off,
      ) as _i2.LoopMode);

  @override
  _i4.Stream<_i2.LoopMode> get loopModeStream => (super.noSuchMethod(
        Invocation.getter(#loopModeStream),
        returnValue: _i4.Stream<_i2.LoopMode>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.LoopMode>.empty(),
      ) as _i4.Stream<_i2.LoopMode>);

  @override
  bool get shuffleModeEnabled => (super.noSuchMethod(
        Invocation.getter(#shuffleModeEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Stream<bool> get shuffleModeEnabledStream => (super.noSuchMethod(
        Invocation.getter(#shuffleModeEnabledStream),
        returnValue: _i4.Stream<bool>.empty(),
        returnValueForMissingStub: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i4.Stream<int?> get androidAudioSessionIdStream => (super.noSuchMethod(
        Invocation.getter(#androidAudioSessionIdStream),
        returnValue: _i4.Stream<int?>.empty(),
        returnValueForMissingStub: _i4.Stream<int?>.empty(),
      ) as _i4.Stream<int?>);

  @override
  _i4.Stream<_i2.PositionDiscontinuity> get positionDiscontinuityStream =>
      (super.noSuchMethod(
        Invocation.getter(#positionDiscontinuityStream),
        returnValue: _i4.Stream<_i2.PositionDiscontinuity>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.PositionDiscontinuity>.empty(),
      ) as _i4.Stream<_i2.PositionDiscontinuity>);

  @override
  bool get automaticallyWaitsToMinimizeStalling => (super.noSuchMethod(
        Invocation.getter(#automaticallyWaitsToMinimizeStalling),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get canUseNetworkResourcesForLiveStreamingWhilePaused =>
      (super.noSuchMethod(
        Invocation.getter(#canUseNetworkResourcesForLiveStreamingWhilePaused),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double get preferredPeakBitRate => (super.noSuchMethod(
        Invocation.getter(#preferredPeakBitRate),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get allowsExternalPlayback => (super.noSuchMethod(
        Invocation.getter(#allowsExternalPlayback),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Duration get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#position),
        ),
        returnValueForMissingStub: _FakeDuration_1(
          this,
          Invocation.getter(#position),
        ),
      ) as Duration);

  @override
  _i4.Stream<Duration> get positionStream => (super.noSuchMethod(
        Invocation.getter(#positionStream),
        returnValue: _i4.Stream<Duration>.empty(),
        returnValueForMissingStub: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Stream<Duration> createPositionStream({
    int? steps = 800,
    Duration? minPeriod = const Duration(milliseconds: 200),
    Duration? maxPeriod = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPositionStream,
          [],
          {
            #steps: steps,
            #minPeriod: minPeriod,
            #maxPeriod: maxPeriod,
          },
        ),
        returnValue: _i4.Stream<Duration>.empty(),
        returnValueForMissingStub: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Future<Duration?> setUrl(
    String? url, {
    Map<String, String>? headers,
    Duration? initialPosition,
    bool? preload = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUrl,
          [url],
          {
            #headers: headers,
            #initialPosition: initialPosition,
            #preload: preload,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
        returnValueForMissingStub: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> setFilePath(
    String? filePath, {
    Duration? initialPosition,
    bool? preload = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFilePath,
          [filePath],
          {
            #initialPosition: initialPosition,
            #preload: preload,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
        returnValueForMissingStub: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> setAsset(
    String? assetPath, {
    String? package,
    bool? preload = true,
    Duration? initialPosition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAsset,
          [assetPath],
          {
            #package: package,
            #preload: preload,
            #initialPosition: initialPosition,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
        returnValueForMissingStub: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> setAudioSource(
    _i2.AudioSource? source, {
    bool? preload = true,
    int? initialIndex,
    Duration? initialPosition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAudioSource,
          [source],
          {
            #preload: preload,
            #initialIndex: initialIndex,
            #initialPosition: initialPosition,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
        returnValueForMissingStub: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i4.Future<Duration?>.value(),
        returnValueForMissingStub: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> setClip({
    Duration? start,
    Duration? end,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setClip,
          [],
          {
            #start: start,
            #end: end,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
        returnValueForMissingStub: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSkipSilenceEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setSkipSilenceEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setSpeed,
          [speed],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPitch(double? pitch) => (super.noSuchMethod(
        Invocation.method(
          #setPitch,
          [pitch],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setLoopMode(_i2.LoopMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setLoopMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setShuffleModeEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setShuffleModeEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> shuffle() => (super.noSuchMethod(
        Invocation.method(
          #shuffle,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAutomaticallyWaitsToMinimizeStalling(
          bool? automaticallyWaitsToMinimizeStalling) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAutomaticallyWaitsToMinimizeStalling,
          [automaticallyWaitsToMinimizeStalling],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setCanUseNetworkResourcesForLiveStreamingWhilePaused(
          bool? canUseNetworkResourcesForLiveStreamingWhilePaused) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCanUseNetworkResourcesForLiveStreamingWhilePaused,
          [canUseNetworkResourcesForLiveStreamingWhilePaused],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPreferredPeakBitRate(double? preferredPeakBitRate) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPeakBitRate,
          [preferredPeakBitRate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAllowsExternalPlayback(bool? allowsExternalPlayback) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAllowsExternalPlayback,
          [allowsExternalPlayback],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seek(
    Duration? position, {
    int? index,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #seek,
          [position],
          {#index: index},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekToNext() => (super.noSuchMethod(
        Invocation.method(
          #seekToNext,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekToPrevious() => (super.noSuchMethod(
        Invocation.method(
          #seekToPrevious,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAndroidAudioAttributes(
          _i5.AndroidAudioAttributes? audioAttributes) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAndroidAudioAttributes,
          [audioAttributes],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i3.Database {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_3(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeDatabase_3(
          this,
          Invocation.getter(#database),
        ),
      ) as _i3.Database);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<T> transaction<T>(
    _i4.Future<T> Function(_i3.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#exclusive: exclusive},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#exclusive: exclusive},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#exclusive: exclusive},
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#exclusive: exclusive},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#exclusive: exclusive},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<T> readTransaction<T>(
          _i4.Future<T> Function(_i3.Transaction)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #readTransaction,
          [action],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #readTransaction,
                  [action],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #readTransaction,
                [action],
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #readTransaction,
                  [action],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #readTransaction,
                [action],
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<T> devInvokeMethod<T>(
    String? method, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeMethod,
                  [
                    method,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #devInvokeMethod,
                [
                  method,
                  arguments,
                ],
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeMethod,
                  [
                    method,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #devInvokeMethod,
                [
                  method,
                  arguments,
                ],
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeSqlMethod,
          [
            method,
            sql,
            arguments,
          ],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeSqlMethod,
                  [
                    method,
                    sql,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #devInvokeSqlMethod,
                [
                  method,
                  sql,
                  arguments,
                ],
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeSqlMethod,
                  [
                    method,
                    sql,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #devInvokeSqlMethod,
                [
                  method,
                  sql,
                  arguments,
                ],
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<void> execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i7.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i4.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub: _i4.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i4.Future<List<Map<String, Object?>>>);

  @override
  _i4.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i4.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub: _i4.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i4.Future<List<Map<String, Object?>>>);

  @override
  _i4.Future<_i3.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [
            sql,
            arguments,
          ],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i4.Future<_i3.QueryCursor>.value(_FakeQueryCursor_5(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.QueryCursor>.value(_FakeQueryCursor_5(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
      ) as _i4.Future<_i3.QueryCursor>);

  @override
  _i4.Future<_i3.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i4.Future<_i3.QueryCursor>.value(_FakeQueryCursor_5(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.QueryCursor>.value(_FakeQueryCursor_5(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
      ) as _i4.Future<_i3.QueryCursor>);

  @override
  _i4.Future<int> rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i7.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i3.Batch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeBatch_6(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeBatch_6(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i3.Batch);
}
